bool teste(BTree a){
	if(aux(a) == -1) return false;
	return true;
	
}

int aux(BTree a){
	int x = 1;
	int y = 1;

	if(a->left != null){
		x = aux(a->left);
	}
	if(a->right != null){
		y = aux(a->right);
	}

	// nodo folha
	if(a->left == null && a-> right == null) return x;

	// uma das árvores esquerdas é maior do que a direita
	if(x == -1 || y == -1){
		return -1;
	}

	if(x < y){
		return y;
	}
	else{
		return -1;
	}
}




for(int i=0; i<N;i++){
	
	int e_aux[N];
	int len = sizeof(vetor)/sizeof(vetor[0]);
	int pos_e_aux = -1;

	for(int e_pos = 0; e_pos<len; e_pos++){

		// assumindo que o par é um array de 2 posições
		if(E[e_pos][0] == i){
			pos_e_aux++;
			e_aux[pos_e_aux] = E[e_pos][1];
		}
	}

	Edge e;
	if(pos_e_aux > -1){
		e->dest = e_aux[0];
		e->prox = NULL;

	}
	Edge root = e;
	for(int aux = 1; aux < pos_e_aux; aux++){
		Edge e2;
		e->prox = e2;
		e2->dest = e_aux[aux];
	}
}












































